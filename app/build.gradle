/*
 * Copyright 2019 Wisekiddo by Ronald Garcia Bernardo. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.kotlin.android.extensions'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.wisekiddo"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Keep the following configuration in order to target Java 8.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "26.+"
            }
        }
    }
}

dependencies {
    def room_version = '2.0.0'
    def kotlin_version = '1.3.31'
    def glide_version = '4.8.0'
    def dagger_version = '2.16'
    def retrofit_version = '2.4.0'
    def rxjava_version = '2.2.1'
    def rxandroid_version = '2.1.0'
    def mockito_version = '2.8.47'
    def okhttp_version = '3.10.0'
    def rxjava_adapter = '1.0.0'
    def material_version = '1.0.0-rc02'
    def legacy_version = '1.0.0'
    def constraint_version = '2.0.0-alpha2'
    def appcompat_version = '1.0.2'
    def test_version = '1.1.0'
    def espresso_version = '3.1.0'
    def junit_version = '4.12'
    def lifecycle_version = '2.0.0-alpha1'
    def moshi_version = '1.8.0'
    def mosby_version = '3.1.1'




    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"
    testImplementation "junit:junit:$junit_version"
    androidTestUtil "androidx.test:orchestrator:$test_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test:runner:$test_version"
    androidTestImplementation "androidx.test:rules:$test_version"
    androidTestImplementation "androidx.test.ext:junit:$test_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    implementation 'androidx.core:core-ktx:1.0.1'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.multidex:multidex-instrumentation:2.0.0'
    implementation "androidx.drawerlayout:drawerlayout:$legacy_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //Material Libs
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_version"

    //Dagger Libs
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    //APP Lifecycle
    implementation group: 'androidx.lifecycle', name: 'lifecycle-extensions', version: "$lifecycle_version"

    //Retrofit , RxJava Dependencies
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$rxjava_adapter"

    //Glide Libs
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    //Room Libs
    api "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"


    //Moshi
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation 'com.jakewharton.timber:timber:4.7.1'



    implementation "com.hannesdorfmann.mosby3:mvp:$mosby_version" // Plain MVP
    implementation "com.hannesdorfmann.mosby3:viewstate:$mosby_version" // MVP + ViewState support
    implementation "com.hannesdorfmann.mosby3:mvp-lce:$mosby_version"
    implementation "com.hannesdorfmann.mosby3:mvp-nullobject-presenter:$mosby_version"
    implementation "com.hannesdorfmann.mosby3:mvp-queuing-presenter:$mosby_version"

    implementation project(':widgets')
}
